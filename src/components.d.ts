/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AAvatar {
        "label": string;
        "size": string;
    }
    interface ABreadcrumb {
        "items": string[] | number[] | string;
    }
    interface AButton {
        "text": string;
        "type": 'text' | 'outline';
    }
    interface ACard {
    }
    interface AInput {
        "label": string;
        "type": string;
        "value": string;
    }
    interface AInputPassword {
    }
    interface AList {
        "items": string[] | number[] | string;
        "label": string;
        "selectable": boolean;
    }
    interface AModal {
        "visible": boolean;
    }
    interface APagination {
        "end": number;
        "range": number;
        "selected": number;
        "start": number;
    }
    interface APanel {
        "header": string;
        "open": boolean;
    }
    interface ATable {
        "columns": { field: string, header: string, sortable?: boolean }[];
        "data": any[];
    }
    interface ATag {
    }
    interface AToast {
        "message": {
    text: string;
    title: string;
    type: string;
    closable: boolean;
    life: number
  };
    }
}
declare global {
    interface HTMLAAvatarElement extends Components.AAvatar, HTMLStencilElement {
    }
    var HTMLAAvatarElement: {
        prototype: HTMLAAvatarElement;
        new (): HTMLAAvatarElement;
    };
    interface HTMLABreadcrumbElement extends Components.ABreadcrumb, HTMLStencilElement {
    }
    var HTMLABreadcrumbElement: {
        prototype: HTMLABreadcrumbElement;
        new (): HTMLABreadcrumbElement;
    };
    interface HTMLAButtonElement extends Components.AButton, HTMLStencilElement {
    }
    var HTMLAButtonElement: {
        prototype: HTMLAButtonElement;
        new (): HTMLAButtonElement;
    };
    interface HTMLACardElement extends Components.ACard, HTMLStencilElement {
    }
    var HTMLACardElement: {
        prototype: HTMLACardElement;
        new (): HTMLACardElement;
    };
    interface HTMLAInputElement extends Components.AInput, HTMLStencilElement {
    }
    var HTMLAInputElement: {
        prototype: HTMLAInputElement;
        new (): HTMLAInputElement;
    };
    interface HTMLAInputPasswordElement extends Components.AInputPassword, HTMLStencilElement {
    }
    var HTMLAInputPasswordElement: {
        prototype: HTMLAInputPasswordElement;
        new (): HTMLAInputPasswordElement;
    };
    interface HTMLAListElement extends Components.AList, HTMLStencilElement {
    }
    var HTMLAListElement: {
        prototype: HTMLAListElement;
        new (): HTMLAListElement;
    };
    interface HTMLAModalElement extends Components.AModal, HTMLStencilElement {
    }
    var HTMLAModalElement: {
        prototype: HTMLAModalElement;
        new (): HTMLAModalElement;
    };
    interface HTMLAPaginationElement extends Components.APagination, HTMLStencilElement {
    }
    var HTMLAPaginationElement: {
        prototype: HTMLAPaginationElement;
        new (): HTMLAPaginationElement;
    };
    interface HTMLAPanelElement extends Components.APanel, HTMLStencilElement {
    }
    var HTMLAPanelElement: {
        prototype: HTMLAPanelElement;
        new (): HTMLAPanelElement;
    };
    interface HTMLATableElement extends Components.ATable, HTMLStencilElement {
    }
    var HTMLATableElement: {
        prototype: HTMLATableElement;
        new (): HTMLATableElement;
    };
    interface HTMLATagElement extends Components.ATag, HTMLStencilElement {
    }
    var HTMLATagElement: {
        prototype: HTMLATagElement;
        new (): HTMLATagElement;
    };
    interface HTMLAToastElement extends Components.AToast, HTMLStencilElement {
    }
    var HTMLAToastElement: {
        prototype: HTMLAToastElement;
        new (): HTMLAToastElement;
    };
    interface HTMLElementTagNameMap {
        "a-avatar": HTMLAAvatarElement;
        "a-breadcrumb": HTMLABreadcrumbElement;
        "a-button": HTMLAButtonElement;
        "a-card": HTMLACardElement;
        "a-input": HTMLAInputElement;
        "a-input-password": HTMLAInputPasswordElement;
        "a-list": HTMLAListElement;
        "a-modal": HTMLAModalElement;
        "a-pagination": HTMLAPaginationElement;
        "a-panel": HTMLAPanelElement;
        "a-table": HTMLATableElement;
        "a-tag": HTMLATagElement;
        "a-toast": HTMLAToastElement;
    }
}
declare namespace LocalJSX {
    interface AAvatar {
        "label"?: string;
        "size"?: string;
    }
    interface ABreadcrumb {
        "items"?: string[] | number[] | string;
    }
    interface AButton {
        "text"?: string;
        "type"?: 'text' | 'outline';
    }
    interface ACard {
    }
    interface AInput {
        "label"?: string;
        "onValueChanged"?: (event: CustomEvent<string>) => void;
        "type"?: string;
        "value"?: string;
    }
    interface AInputPassword {
    }
    interface AList {
        "items"?: string[] | number[] | string;
        "label"?: string;
        "selectable"?: boolean;
    }
    interface AModal {
        "visible"?: boolean;
    }
    interface APagination {
        "end"?: number;
        "range"?: number;
        "selected"?: number;
        "start"?: number;
    }
    interface APanel {
        "header"?: string;
        "open"?: boolean;
    }
    interface ATable {
        "columns"?: { field: string, header: string, sortable?: boolean }[];
        "data"?: any[];
    }
    interface ATag {
    }
    interface AToast {
        "message"?: {
    text: string;
    title: string;
    type: string;
    closable: boolean;
    life: number
  };
    }
    interface IntrinsicElements {
        "a-avatar": AAvatar;
        "a-breadcrumb": ABreadcrumb;
        "a-button": AButton;
        "a-card": ACard;
        "a-input": AInput;
        "a-input-password": AInputPassword;
        "a-list": AList;
        "a-modal": AModal;
        "a-pagination": APagination;
        "a-panel": APanel;
        "a-table": ATable;
        "a-tag": ATag;
        "a-toast": AToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "a-avatar": LocalJSX.AAvatar & JSXBase.HTMLAttributes<HTMLAAvatarElement>;
            "a-breadcrumb": LocalJSX.ABreadcrumb & JSXBase.HTMLAttributes<HTMLABreadcrumbElement>;
            "a-button": LocalJSX.AButton & JSXBase.HTMLAttributes<HTMLAButtonElement>;
            "a-card": LocalJSX.ACard & JSXBase.HTMLAttributes<HTMLACardElement>;
            "a-input": LocalJSX.AInput & JSXBase.HTMLAttributes<HTMLAInputElement>;
            "a-input-password": LocalJSX.AInputPassword & JSXBase.HTMLAttributes<HTMLAInputPasswordElement>;
            "a-list": LocalJSX.AList & JSXBase.HTMLAttributes<HTMLAListElement>;
            "a-modal": LocalJSX.AModal & JSXBase.HTMLAttributes<HTMLAModalElement>;
            "a-pagination": LocalJSX.APagination & JSXBase.HTMLAttributes<HTMLAPaginationElement>;
            "a-panel": LocalJSX.APanel & JSXBase.HTMLAttributes<HTMLAPanelElement>;
            "a-table": LocalJSX.ATable & JSXBase.HTMLAttributes<HTMLATableElement>;
            "a-tag": LocalJSX.ATag & JSXBase.HTMLAttributes<HTMLATagElement>;
            "a-toast": LocalJSX.AToast & JSXBase.HTMLAttributes<HTMLAToastElement>;
        }
    }
}
